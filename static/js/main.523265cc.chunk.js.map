{"version":3,"sources":["Profile.js","Header.js","AddPostForm.js","AddCommentForm.js","Comment.js","Post.js","Feed.js","Footer.js","serviceWorker.js","index.js","App.js"],"names":["Profile","props","className","src","username","Header","AddPostForm","useState","author","setAuthor","message","setMessage","onSubmit","e","preventDefault","fetch","baseURL","method","headers","body","JSON","stringify","likes","then","json","data","onPostAdded","label","type","name","value","onChange","target","floatingLabel","AddCommentForm","Comment","comment","Post","count","setCount","onClick","comments","map","Feed","posts","item","key","_id","Footer","Boolean","window","location","hostname","match","ReactDOM","render","setPosts","useEffect","console","log","copy","concat","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.523265cc.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Profile(props) {\n  return (\n    <>\n      <div className=\"profilepic\">\n        <img className=\"profilepic\" src=\"../portrait.jpg\" />\n      </div>\n      <h2>{props.username}</h2>\n    </>\n  );\n}\n","import React from \"react\";\nimport Profile from \"./Profile.js\";\nexport default function Header(props) {\n  return (\n    <>\n      <header className=\"App-header\">\n        <h1>Social media</h1>\n        <Profile username={props.username} />\n      </header>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport Input from \"muicss/lib/react/input\";\nimport Button from \"muicss/lib/react/button\";\n\nexport default function AddPostForm(props) {\n  const [author, setAuthor] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  /*function onAuthorChange(e){\n  \n    }*/\n  const onAuthorChange = e => {\n    setAuthor(e.target.value);\n  };\n  const onMessageChange = e => {\n    setMessage(e.target.value);\n  };\n  const onSubmit = e => {\n    e.preventDefault();\n\n    const baseURL = \"https://frontendautmn2019-5ad1.restdb.io/rest/\";\n    const headers = {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      \"x-apikey\": \"5d887443fd86cb75861e25ee\",\n      \"cache-control\": \"no-cache\"\n    };\n    fetch(baseURL + \"posts\", {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify({\n        author: author,\n        message: message,\n        likes: 0\n      })\n    })\n      .then(e => e.json())\n      .then(data => {\n        props.onPostAdded(data);\n        //console.log(e);\n      });\n  };\n  return (\n    <form onSubmit={onSubmit}>\n      <h2>AddPostForm</h2>\n\n      <Input label=\"Input 1\" type=\"text\" name=\"author\" value={author} onChange={onAuthorChange} floatingLabel={true} />\n\n      <textarea value={message} onChange={onMessageChange}></textarea>\n      <input type=\"submit\" value=\"Say what you think\" />\n      <Button className=\"newcolor\">button</Button>\n    </form>\n  );\n}\n","import React from \"react\";\n\nexport default function AddCommentForm() {\n  return (\n    <>\n      <p>AddCommentForm</p>\n      <form></form>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function Comment(props) {\n  return (\n    <>\n      <li>\n        \"{props.author}\" said: {props.comment}\n      </li>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport AddCommentForm from \"./AddCommentForm.js\";\nimport Comment from \"./Comment.js\";\nexport default function Post(props) {\n  const [count, setCount] = useState(0);\n\n  const updateCount = () => {\n    setCount(count + 1);\n  };\n  return (\n    <>\n      <div className=\"postcontainer\">\n        <p>{props.author}</p>\n        <p>{props.message}</p>\n        <button onClick={updateCount}>{count} likes</button>\n        <AddCommentForm />\n        <ol>\n          {props.comments.map(comment => {\n            return <Comment author={comment.author} comment={comment.comment} />;\n          })}\n        </ol>\n\n        <Comment />\n        <Comment />\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport AddPostForm from \"./AddPostForm\";\nimport Post from \"./Post\";\nexport default function Feed(props) {\n  return (\n    <section>\n      FEED\n      <AddPostForm onPostAdded={props.onPostAdded} />\n      {props.posts.map(item => {\n        return <Post key={item._id} comments={item.comments} likes={item.likes} message={item.message} author={item.author} />;\n      })}\n    </section>\n  );\n}\n","import React from \"react\";\nexport default function Footer(props) {\n  return (\n    <>\n      <footer>\n        <p>Copyright 2019c {props.username}</p>\n      </footer>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header.js\";\nimport Feed from \"./Feed.js\";\nimport Footer from \"./Footer.js\";\nimport \"./App.css\";\n\nexport default function App() {\n  const name = \"Jonas\"; // pass this to <Profile /> and <Footer />\n\n  const [posts, setPosts] = useState([]);\n  const [loggedIn, setLoggedIn] = useState(false);\n  useEffect(() => {\n    const baseURL = \"https://inappropriatedb-4dbf.restdb.io/rest/posts\";\n    const headers = {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      \"x-apikey\": \"5d888182fd86cb75861e262c\",\n      \"cache-control\": \"no-cache\"\n    };\n    fetch(baseURL + \"posts?fetchchildren=true\", {\n      method: \"get\",\n      headers: headers\n    })\n      .then(e => e.json())\n      .then(e => setPosts(e));\n  }, []);\n\n  /*function addPost() {\n    const copy = posts.concat({\n      message: \"very strange\",\n      author: \"everybody\"\n    });\n    setPosts(copy);\n  }*/\n  function addNewPost(data) {\n    console.log(data);\n    data.comments = [];\n    const copy = posts.concat(data);\n    setPosts(copy);\n  }\n  return (\n    <div className=\"App\">\n      <Header name={name} />\n      <Feed onPostAdded={addNewPost} posts={posts} />\n      <Footer name={name} />\n    </div>\n  );\n}\n"],"sourceRoot":""}